# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AllDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_stamp=None, lat=None, long=None, province=None, population=None, pm=None, newcovid=None, totalcovid=None):  # noqa: E501
        """AllDetails - a model defined in OpenAPI

        :param time_stamp: The time_stamp of this AllDetails.  # noqa: E501
        :type time_stamp: str
        :param lat: The lat of this AllDetails.  # noqa: E501
        :type lat: float
        :param long: The long of this AllDetails.  # noqa: E501
        :type long: float
        :param province: The province of this AllDetails.  # noqa: E501
        :type province: str
        :param population: The population of this AllDetails.  # noqa: E501
        :type population: int
        :param pm: The pm of this AllDetails.  # noqa: E501
        :type pm: int
        :param newcovid: The newcovid of this AllDetails.  # noqa: E501
        :type newcovid: int
        :param totalcovid: The totalcovid of this AllDetails.  # noqa: E501
        :type totalcovid: int
        """
        self.openapi_types = {
            'time_stamp': str,
            'lat': float,
            'long': float,
            'province': str,
            'population': int,
            'pm': int,
            'newcovid': int,
            'totalcovid': int
        }

        self.attribute_map = {
            'time_stamp': 'timeStamp',
            'lat': 'lat',
            'long': 'long',
            'province': 'province',
            'population': 'population',
            'pm': 'pm',
            'newcovid': 'newcovid',
            'totalcovid': 'totalcovid'
        }

        self._time_stamp = time_stamp
        self._lat = lat
        self._long = long
        self._province = province
        self._population = population
        self._pm = pm
        self._newcovid = newcovid
        self._totalcovid = totalcovid

    @classmethod
    def from_dict(cls, dikt) -> 'AllDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllDetails of this AllDetails.  # noqa: E501
        :rtype: AllDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_stamp(self):
        """Gets the time_stamp of this AllDetails.


        :return: The time_stamp of this AllDetails.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this AllDetails.


        :param time_stamp: The time_stamp of this AllDetails.
        :type time_stamp: str
        """

        self._time_stamp = time_stamp

    @property
    def lat(self):
        """Gets the lat of this AllDetails.


        :return: The lat of this AllDetails.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this AllDetails.


        :param lat: The lat of this AllDetails.
        :type lat: float
        """

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this AllDetails.


        :return: The long of this AllDetails.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this AllDetails.


        :param long: The long of this AllDetails.
        :type long: float
        """

        self._long = long

    @property
    def province(self):
        """Gets the province of this AllDetails.


        :return: The province of this AllDetails.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this AllDetails.


        :param province: The province of this AllDetails.
        :type province: str
        """

        self._province = province

    @property
    def population(self):
        """Gets the population of this AllDetails.


        :return: The population of this AllDetails.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this AllDetails.


        :param population: The population of this AllDetails.
        :type population: int
        """

        self._population = population

    @property
    def pm(self):
        """Gets the pm of this AllDetails.


        :return: The pm of this AllDetails.
        :rtype: int
        """
        return self._pm

    @pm.setter
    def pm(self, pm):
        """Sets the pm of this AllDetails.


        :param pm: The pm of this AllDetails.
        :type pm: int
        """

        self._pm = pm

    @property
    def newcovid(self):
        """Gets the newcovid of this AllDetails.


        :return: The newcovid of this AllDetails.
        :rtype: int
        """
        return self._newcovid

    @newcovid.setter
    def newcovid(self, newcovid):
        """Sets the newcovid of this AllDetails.


        :param newcovid: The newcovid of this AllDetails.
        :type newcovid: int
        """

        self._newcovid = newcovid

    @property
    def totalcovid(self):
        """Gets the totalcovid of this AllDetails.


        :return: The totalcovid of this AllDetails.
        :rtype: int
        """
        return self._totalcovid

    @totalcovid.setter
    def totalcovid(self, totalcovid):
        """Sets the totalcovid of this AllDetails.


        :param totalcovid: The totalcovid of this AllDetails.
        :type totalcovid: int
        """

        self._totalcovid = totalcovid
